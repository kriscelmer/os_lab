heat_template_version: 2018-08-31

description: >
  Section "Introduction to Heat and Automation" Lesson "Deploying a Single-Instance Web Application with Heat": 
  single instance web application with network.
  This template builds its own tenant network (net+subnet+router), a security
  group that allows HTTP/HTTPS only, a server port, a VM, and a Floating IP.
  On first boot, the VM installs NGINX and publishes a single page web app.
  Parameters are provided via a separate environment file.

# ========== PARAMETERS (no defaults here; see the env file) ==========
parameters:
  ext_provider_net:
    type: string
    label: External provider network
    description: External network (name or ID) used for router gateway and Floating IPs.
    constraints:
      - custom_constraint: neutron.network

  image_name:
    type: string
    label: Web server image
    description: Glance image name or ID (Ubuntu/RHEL-family image recommended).
    constraints:
      - custom_constraint: glance.image

  flavor_name:
    type: string
    label: Flavor
    description: Nova flavor name or ID suitable for NGINX (e.g., m1.small).
    constraints:
      - custom_constraint: nova.flavor

  key_name:
    type: string
    label: Key pair
    description: Existing Nova key pair for the VM (SSH not opened, but useful for rescue).
    constraints:
      - custom_constraint: nova.keypair

  server_name:
    type: string
    label: Server name
    description: Name for the Nova server.

  internal_cidr:
    type: string
    label: Internal subnet CIDR
    description: CIDR for sec11-subnet (e.g., 10.51.0.0/24).
    constraints:
      - allowed_pattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]{1,2}$'
        description: Must look like an IPv4 CIDR, e.g., 10.0.0.0/24

  dns_nameservers:
    type: comma_delimited_list
    label: DNS nameservers
    description: Comma-separated DNS server IPs for the subnet (e.g., 8.8.8.8).

  page_url:
    type: string
    label: Page URL
    description: URL of the web page to fetch and display on the server.

# ========== RESOURCES ==========
resources:

  # -------- Networking layer (tenant side) --------
  sec11_net:
    type: OS::Neutron::Net
    properties:
      name: sec11-net

  sec11_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: sec11-subnet
      network_id: { get_resource: sec11_net }
      cidr: { get_param: internal_cidr }
      ip_version: 4
      enable_dhcp: true
      dns_nameservers: { get_param: dns_nameservers }

  sec11_router:
    type: OS::Neutron::Router
    properties:
      name: sec11-router
      external_gateway_info:
        network: { get_param: ext_provider_net }

  sec11_router_if:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: sec11_router }
      subnet_id: { get_resource: sec11_subnet }

  # -------- Least-privilege security group (HTTP/HTTPS only) --------
  sec11_web_sg:
    type: OS::Neutron::SecurityGroup
    properties:
      name: sec11-web-sg
      description: Allow HTTP/HTTPS from anywhere. No SSH.
      rules:
        # HTTP
        - direction: ingress
          ethertype: IPv4
          protocol: tcp
          port_range_min: 80
          port_range_max: 80
          remote_ip_prefix: 0.0.0.0/0
        # HTTPS
        - direction: ingress
          ethertype: IPv4
          protocol: tcp
          port_range_min: 443
          port_range_max: 443
          remote_ip_prefix: 0.0.0.0/0
        # (Default egress is allowed; we don't add SSH.)

  # -------- Server port (lets us bind SG + Floating IP cleanly) --------
  sec11_server_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: sec11_net }
      security_groups:
        - { get_resource: sec11_web_sg }
      fixed_ips:
        - subnet_id: { get_resource: sec11_subnet }

  # -------- Compute layer: the web server VM + user-data bootstrap --------
  sec11_web_server:
    type: OS::Nova::Server
    properties:
      name: { get_param: server_name }       # e.g., sec11-web-server
      image: { get_param: image_name }
      flavor: { get_param: flavor_name }
      key_name: { get_param: key_name }
      # Attach via the pre-created port so the SG applies and we can bind a FIP.
      networks:
        - port: { get_resource: sec11_server_port }

      # Boot-time configuration (cloud-init/metadata service):
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            set -euxo pipefail
            export DEBIAN_FRONTEND=noninteractive
            apt-get update -y
            apt-get install -y nginx curl
            systemctl enable nginx || true
            WEBROOT=/var/www/html
            mkdir -p "$WEBROOT"
            # Fetch the single-file web page for Lesson 51:
            curl -fsSL "__PAGE_URL__" -o "$WEBROOT/index.html"
            systemctl restart nginx || true
          params:
            __PAGE_URL__: { get_param: page_url }

  # -------- Public access: allocate and associate a Floating IP --------
  sec11_fip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: ext_provider_net }
      port_id: { get_resource: sec11_server_port }

# ========== OUTPUTS ==========
outputs:
  web_server_id:
    description: Nova server UUID.
    value: { get_resource: sec11_web_server }

  floating_ip:
    description: Public IPv4 address for the web server.
    value: { get_attr: [ sec11_fip, floating_ip_address ] }

  web_url:
    description: Convenience URL to open in your browser.
    value:
      str_replace:
        template: "http://IPADDR/"
        params:
          IPADDR: { get_attr: [ sec11_fip, floating_ip_address ] }
